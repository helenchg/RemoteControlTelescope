import processing.core.*; 
import processing.data.*; 
import processing.event.*; 
import processing.opengl.*; 

import g4p_controls.*; 
import processing.serial.*; 
import java.util.*; 

import java.util.HashMap; 
import java.util.ArrayList; 
import java.io.File; 
import java.io.BufferedReader; 
import java.io.PrintWriter; 
import java.io.InputStream; 
import java.io.OutputStream; 
import java.io.IOException; 

public class TelescopeRemoteGui extends PApplet {

// Need G4P library




Serial myPort; // Create object from Serial class
String portName = Serial.list()[0]; //change the 0 to a 1 or 2 etc. to match your port
Float temperature;    // Data received from the serial port
String message;
//String message2;
PFont f;


public void setup() {
  myPort = new Serial(this, portName, 9600);
  myPort.bufferUntil('\n'); 
  temperature = 0.0f;
  f = createFont("Open Sans", 150, true);
  size(480, 320, JAVA2D);
  createGUI();
  customGUI();
  // Place your setup code here
}

public void draw() {
  background(230);
  textFont(f, 150);
  textSize(20);
  fill(0);
  text("Ambient Temperature: " + temperature + " \u00b0C", 50, 50 );
}

// Use this method to add additional statements
// to customise the GUI controls
public void customGUI() {
}

public void serialEvent (Serial s) {
  message = s.readStringUntil('\n');       //read serial data and store it in "message" variable.
  message = message.trim();                //cut out the white space
  println(message);                      // SOMETIMES GETTING GIBBERISH AT THE BEGINNING. NULL EXCEPTION!

  if (message.contains("Temp")) {           // check if the message contains the string "Temp"
    String temp = message;                  // store the message in variable temp 
    temp = temp.replace("Temp: ", "");      // cut out the string "Temp: "
    temperature = parseFloat(temp);         // convert the string to float and store the data in temperature
  }
  
//    message = s.readStringUntil('\n');       //read serial data and store it in "message" variable.
//  message = message.trim();                //cut out the white space
//  println(message);                      // SOMETIMES GETTING GIBBERISH AT THE BEGINNING. NULL EXCEPTION!
//
//  if (message.contains("Temp1")) {           // check if the message contains the string "Temp"
//    String temp = message;                  // store the message in variable temp 
//    temp = temp.replace("Temp1: ", "");      // cut out the string "Temp: "
//    temperature = parseFloat(temp);         // convert the string to float and store the data in temperature
//  }
}

/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void button1_click1(GButton source, GEvent event) { //_CODE_:button_fanOn:285534:
  println("Fans: ON");
  myPort.write("ON");
} //_CODE_:button_fanOn:285534:

public void button1_click2(GButton source, GEvent event) { //_CODE_:button_fansOff:818199:
  println("Fans: OFF");
  myPort.write("OFF");

} //_CODE_:button_fansOff:818199:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  if(frame != null)
    frame.setTitle("Sketch Window");
  button_fanOn = new GButton(this, 383, 29, 80, 30);
  button_fanOn.setText("FANS ON");
  button_fanOn.addEventHandler(this, "button1_click1");
  button_fansOff = new GButton(this, 383, 66, 80, 30);
  button_fansOff.setText("FANS OFF");
  button_fansOff.addEventHandler(this, "button1_click2");
//  label_temperature = new GLabel(this, 382, 114, 80, 20);
//  label_temperature.setText("" + temperature + " \u00b0C");
//  label_temperature.setOpaque(false);
}

// Variable declarations 
// autogenerated do not edit
GButton button_fanOn; 
GButton button_fansOff; 
GLabel label_temperature; 

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "TelescopeRemoteGui" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
